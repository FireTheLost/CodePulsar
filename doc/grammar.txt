---------------------------------KEY---------------------------------

Key:
    | "?" : Zero Or One Times
    | "*" : Zero Or More Times
    | "+" : One Or More Times

-------------------------------GRAMMAR-------------------------------

file:
    | program EOF

program:
    | package_declaration? import_statement* top_level

package_declaration:
    | "package" IDENTIFIER ("." IDENTIFIER)* ";"

import_statement:
    | "import" IDENTIFIER ("." IDENTIFIER)* ";"

top_level:
    | declaration*

declaration:
    | heavy_declaration
    | light_declaration

heavy_declaration:
    | "class" IDENTIFIER "{" light_declaration* "}"

light_declaration:
    | function_declaration
    | variable_declaration

function_declaration:
    | "fun" IDENTIFIER "(" parameter? ")" block

parameter:
    | IDENTIFIER ":" DATATYPE ("," IDENTIFIER ":" DATATYPE)*

variable_declaration:
    | ("var" | "const") IDENTIFIER ":" DATATYPE ("=" expression)? ";"

block:
    | "{" statement* "}"

statement:
    | while_statement
    | if_statement
    | return_statement
    | variable_declaration
    | expression_statement

while_statement:
    | "while" expression block

if_statement:
    | "if" expression block ("else" (if_statement | block))?

return_statement:
    | "return" expression? ";"

expression_statement:
    | expression ";"

expression:
    | assignment

assignment:
    | IDENTIFIER ("=" | "+=" | "-=" | "*=" | "/=" | "%=") assignment
    | logical_or

logical_or:
    | logical_and ("||" logical_and)*

logical_and:
    | equality ("&&" equality)*

equality:
    | comparison (("!=" | "==") comparison)*

comparison:
    | term ((">" | ">=" | "<" | "<=") term)*

term:
    | factor (("-" | "+") factor)*

factor:
    | unary (("/" | "*" | "%") unary)*

unary:
    | ("!" | "-" | "+") unary
    | primary

primary:
    | IDENTIFIER
    | DATA
    | "(" expression ")"